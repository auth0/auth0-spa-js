import { Request } from '../lib/request';
import { Response } from '../lib/response';
import { AWSError } from '../lib/error';
import { Service } from '../lib/service';
import { ServiceConfigurationOptions } from '../lib/service';
import { ConfigBase as Config } from '../lib/config';
import { UseDualstackConfigOptions } from '../lib/config_use_dualstack';
interface Blob {}
declare class S3Control extends Service {
  /**
   * Constructs a service object. This object has one method for each API operation.
   */
  constructor(options?: S3Control.Types.ClientConfiguration);
  config: Config & S3Control.Types.ClientConfiguration;
  /**
   * Creates an Amazon S3 batch operations job.
   */
  createJob(
    params: S3Control.Types.CreateJobRequest,
    callback?: (err: AWSError, data: S3Control.Types.CreateJobResult) => void
  ): Request<S3Control.Types.CreateJobResult, AWSError>;
  /**
   * Creates an Amazon S3 batch operations job.
   */
  createJob(
    callback?: (err: AWSError, data: S3Control.Types.CreateJobResult) => void
  ): Request<S3Control.Types.CreateJobResult, AWSError>;
  /**
   * Deletes the block public access configuration for the specified account.
   */
  deletePublicAccessBlock(
    params: S3Control.Types.DeletePublicAccessBlockRequest,
    callback?: (err: AWSError, data: {}) => void
  ): Request<{}, AWSError>;
  /**
   * Deletes the block public access configuration for the specified account.
   */
  deletePublicAccessBlock(
    callback?: (err: AWSError, data: {}) => void
  ): Request<{}, AWSError>;
  /**
   * Retrieves the configuration parameters and status for a batch operations job.
   */
  describeJob(
    params: S3Control.Types.DescribeJobRequest,
    callback?: (err: AWSError, data: S3Control.Types.DescribeJobResult) => void
  ): Request<S3Control.Types.DescribeJobResult, AWSError>;
  /**
   * Retrieves the configuration parameters and status for a batch operations job.
   */
  describeJob(
    callback?: (err: AWSError, data: S3Control.Types.DescribeJobResult) => void
  ): Request<S3Control.Types.DescribeJobResult, AWSError>;
  /**
   *
   */
  getPublicAccessBlock(
    params: S3Control.Types.GetPublicAccessBlockRequest,
    callback?: (
      err: AWSError,
      data: S3Control.Types.GetPublicAccessBlockOutput
    ) => void
  ): Request<S3Control.Types.GetPublicAccessBlockOutput, AWSError>;
  /**
   *
   */
  getPublicAccessBlock(
    callback?: (
      err: AWSError,
      data: S3Control.Types.GetPublicAccessBlockOutput
    ) => void
  ): Request<S3Control.Types.GetPublicAccessBlockOutput, AWSError>;
  /**
   * Lists current jobs and jobs that have ended within the last 30 days for the AWS account making the request.
   */
  listJobs(
    params: S3Control.Types.ListJobsRequest,
    callback?: (err: AWSError, data: S3Control.Types.ListJobsResult) => void
  ): Request<S3Control.Types.ListJobsResult, AWSError>;
  /**
   * Lists current jobs and jobs that have ended within the last 30 days for the AWS account making the request.
   */
  listJobs(
    callback?: (err: AWSError, data: S3Control.Types.ListJobsResult) => void
  ): Request<S3Control.Types.ListJobsResult, AWSError>;
  /**
   *
   */
  putPublicAccessBlock(
    params: S3Control.Types.PutPublicAccessBlockRequest,
    callback?: (err: AWSError, data: {}) => void
  ): Request<{}, AWSError>;
  /**
   *
   */
  putPublicAccessBlock(
    callback?: (err: AWSError, data: {}) => void
  ): Request<{}, AWSError>;
  /**
   * Updates an existing job's priority.
   */
  updateJobPriority(
    params: S3Control.Types.UpdateJobPriorityRequest,
    callback?: (
      err: AWSError,
      data: S3Control.Types.UpdateJobPriorityResult
    ) => void
  ): Request<S3Control.Types.UpdateJobPriorityResult, AWSError>;
  /**
   * Updates an existing job's priority.
   */
  updateJobPriority(
    callback?: (
      err: AWSError,
      data: S3Control.Types.UpdateJobPriorityResult
    ) => void
  ): Request<S3Control.Types.UpdateJobPriorityResult, AWSError>;
  /**
   * Updates the status for the specified job. Use this operation to confirm that you want to run a job or to cancel an existing job.
   */
  updateJobStatus(
    params: S3Control.Types.UpdateJobStatusRequest,
    callback?: (
      err: AWSError,
      data: S3Control.Types.UpdateJobStatusResult
    ) => void
  ): Request<S3Control.Types.UpdateJobStatusResult, AWSError>;
  /**
   * Updates the status for the specified job. Use this operation to confirm that you want to run a job or to cancel an existing job.
   */
  updateJobStatus(
    callback?: (
      err: AWSError,
      data: S3Control.Types.UpdateJobStatusResult
    ) => void
  ): Request<S3Control.Types.UpdateJobStatusResult, AWSError>;
}
declare namespace S3Control {
  export type AccountId = string;
  export type Boolean = boolean;
  export type ConfirmationRequired = boolean;
  export interface CreateJobRequest {
    /**
     *
     */
    AccountId: AccountId;
    /**
     * Indicates whether confirmation is required before Amazon S3 runs the job. Confirmation is only required for jobs created through the Amazon S3 console.
     */
    ConfirmationRequired?: ConfirmationRequired;
    /**
     * The operation that you want this job to perform on each object listed in the manifest. For more information about the available operations, see Available Operations in the Amazon Simple Storage Service Developer Guide.
     */
    Operation: JobOperation;
    /**
     * Configuration parameters for the optional job-completion report.
     */
    Report: JobReport;
    /**
     * An idempotency token to ensure that you don't accidentally submit the same request twice. You can use any string up to the maximum length.
     */
    ClientRequestToken: NonEmptyMaxLength64String;
    /**
     * Configuration parameters for the manifest.
     */
    Manifest: JobManifest;
    /**
     * A description for this job. You can use any string within the permitted length. Descriptions don't need to be unique and can be used for multiple jobs.
     */
    Description?: NonEmptyMaxLength256String;
    /**
     * The numerical priority for this job. Higher numbers indicate higher priority.
     */
    Priority: JobPriority;
    /**
     * The Amazon Resource Name (ARN) for the Identity and Access Management (IAM) Role that batch operations will use to execute this job's operation on each object in the manifest.
     */
    RoleArn: IAMRoleArn;
  }
  export interface CreateJobResult {
    /**
     * The ID for this job. Amazon S3 generates this ID automatically and returns it after a successful Create Job request.
     */
    JobId?: JobId;
  }
  export interface DeletePublicAccessBlockRequest {
    /**
     * The account ID for the AWS account whose block public access configuration you want to delete.
     */
    AccountId: AccountId;
  }
  export interface DescribeJobRequest {
    /**
     *
     */
    AccountId: AccountId;
    /**
     * The ID for the job whose information you want to retrieve.
     */
    JobId: JobId;
  }
  export interface DescribeJobResult {
    /**
     * Contains the configuration parameters and status for the job specified in the Describe Job request.
     */
    Job?: JobDescriptor;
  }
  export interface GetPublicAccessBlockOutput {
    /**
     *
     */
    PublicAccessBlockConfiguration?: PublicAccessBlockConfiguration;
  }
  export interface GetPublicAccessBlockRequest {
    /**
     *
     */
    AccountId: AccountId;
  }
  export type IAMRoleArn = string;
  export type JobArn = string;
  export type JobCreationTime = Date;
  export interface JobDescriptor {
    /**
     * The ID for the specified job.
     */
    JobId?: JobId;
    /**
     * Indicates whether confirmation is required before Amazon S3 begins running the specified job. Confirmation is required only for jobs created through the Amazon S3 console.
     */
    ConfirmationRequired?: ConfirmationRequired;
    /**
     * The description for this job, if one was provided in this job's Create Job request.
     */
    Description?: NonEmptyMaxLength256String;
    /**
     * The Amazon Resource Name (ARN) for this job.
     */
    JobArn?: JobArn;
    /**
     * The current status of the specified job.
     */
    Status?: JobStatus;
    /**
     * The configuration information for the specified job's manifest object.
     */
    Manifest?: JobManifest;
    /**
     * The operation that the specified job is configured to execute on the objects listed in the manifest.
     */
    Operation?: JobOperation;
    /**
     * The priority of the specified job.
     */
    Priority?: JobPriority;
    /**
     * Describes the total number of tasks that the specified job has executed, the number of tasks that succeeded, and the number of tasks that failed.
     */
    ProgressSummary?: JobProgressSummary;
    /**
     *
     */
    StatusUpdateReason?: JobStatusUpdateReason;
    /**
     * If the specified job failed, this field contains information describing the failure.
     */
    FailureReasons?: JobFailureList;
    /**
     * Contains the configuration information for the job-completion report if you requested one in the Create Job request.
     */
    Report?: JobReport;
    /**
     * A timestamp indicating when this job was created.
     */
    CreationTime?: JobCreationTime;
    /**
     * A timestamp indicating when this job terminated. A job's termination date is the date and time when it succeeded, failed, or was canceled.
     */
    TerminationDate?: JobTerminationDate;
    /**
     * The Amazon Resource Name (ARN) for the Identity and Access Management (IAM) Role assigned to execute the tasks for this job.
     */
    RoleArn?: IAMRoleArn;
    /**
     * The timestamp when this job was suspended, if it has been suspended.
     */
    SuspendedDate?: SuspendedDate;
    /**
     * The reason why the specified job was suspended. A job is only suspended if you create it through the Amazon S3 console. When you create the job, it enters the Suspended state to await confirmation before running. After you confirm the job, it automatically exits the Suspended state.
     */
    SuspendedCause?: SuspendedCause;
  }
  export interface JobFailure {
    /**
     * The failure code, if any, for the specified job.
     */
    FailureCode?: JobFailureCode;
    /**
     * The failure reason, if any, for the specified job.
     */
    FailureReason?: JobFailureReason;
  }
  export type JobFailureCode = string;
  export type JobFailureList = JobFailure[];
  export type JobFailureReason = string;
  export type JobId = string;
  export interface JobListDescriptor {
    /**
     * The ID for the specified job.
     */
    JobId?: JobId;
    /**
     * The user-specified description that was included in the specified job's Create Job request.
     */
    Description?: NonEmptyMaxLength256String;
    /**
     * The operation that the specified job is configured to run on each object listed in the manifest.
     */
    Operation?: OperationName;
    /**
     * The current priority for the specified job.
     */
    Priority?: JobPriority;
    /**
     * The specified job's current status.
     */
    Status?: JobStatus;
    /**
     * A timestamp indicating when the specified job was created.
     */
    CreationTime?: JobCreationTime;
    /**
     * A timestamp indicating when the specified job terminated. A job's termination date is the date and time when it succeeded, failed, or was canceled.
     */
    TerminationDate?: JobTerminationDate;
    /**
     * Describes the total number of tasks that the specified job has executed, the number of tasks that succeeded, and the number of tasks that failed.
     */
    ProgressSummary?: JobProgressSummary;
  }
  export type JobListDescriptorList = JobListDescriptor[];
  export interface JobManifest {
    /**
     * Describes the format of the specified job's manifest. If the manifest is in CSV format, also describes the columns contained within the manifest.
     */
    Spec: JobManifestSpec;
    /**
     * Contains the information required to locate the specified job's manifest.
     */
    Location: JobManifestLocation;
  }
  export type JobManifestFieldList = JobManifestFieldName[];
  export type JobManifestFieldName =
    | 'Ignore'
    | 'Bucket'
    | 'Key'
    | 'VersionId'
    | string;
  export type JobManifestFormat =
    | 'S3BatchOperations_CSV_20180820'
    | 'S3InventoryReport_CSV_20161130'
    | string;
  export interface JobManifestLocation {
    /**
     * The Amazon Resource Name (ARN) for a manifest object.
     */
    ObjectArn: S3KeyArnString;
    /**
     * The optional version ID to identify a specific version of the manifest object.
     */
    ObjectVersionId?: S3ObjectVersionId;
    /**
     * The ETag for the specified manifest object.
     */
    ETag: NonEmptyMaxLength1024String;
  }
  export interface JobManifestSpec {
    /**
     * Indicates which of the available formats the specified manifest uses.
     */
    Format: JobManifestFormat;
    /**
     * If the specified manifest object is in the S3BatchOperations_CSV_20180820 format, this element describes which columns contain the required data.
     */
    Fields?: JobManifestFieldList;
  }
  export type JobNumberOfTasksFailed = number;
  export type JobNumberOfTasksSucceeded = number;
  export interface JobOperation {
    /**
     * Directs the specified job to invoke an AWS Lambda function on each object in the manifest.
     */
    LambdaInvoke?: LambdaInvokeOperation;
    /**
     * Directs the specified job to execute a PUT Copy object call on each object in the manifest.
     */
    S3PutObjectCopy?: S3CopyObjectOperation;
    /**
     * Directs the specified job to execute a PUT Object acl call on each object in the manifest.
     */
    S3PutObjectAcl?: S3SetObjectAclOperation;
    /**
     * Directs the specified job to execute a PUT Object tagging call on each object in the manifest.
     */
    S3PutObjectTagging?: S3SetObjectTaggingOperation;
    /**
     * Directs the specified job to execute an Initiate Glacier Restore call on each object in the manifest.
     */
    S3InitiateRestoreObject?: S3InitiateRestoreObjectOperation;
  }
  export type JobPriority = number;
  export interface JobProgressSummary {
    /**
     *
     */
    TotalNumberOfTasks?: JobTotalNumberOfTasks;
    /**
     *
     */
    NumberOfTasksSucceeded?: JobNumberOfTasksSucceeded;
    /**
     *
     */
    NumberOfTasksFailed?: JobNumberOfTasksFailed;
  }
  export interface JobReport {
    /**
     * The bucket where specified job-completion report will be stored.
     */
    Bucket?: S3BucketArnString;
    /**
     * The format of the specified job-completion report.
     */
    Format?: JobReportFormat;
    /**
     * Indicates whether the specified job will generate a job-completion report.
     */
    Enabled: Boolean;
    /**
     * An optional prefix to describe where in the specified bucket the job-completion report will be stored. Amazon S3 will store the job-completion report at &lt;prefix&gt;/job-&lt;job-id&gt;/report.json.
     */
    Prefix?: ReportPrefixString;
    /**
     * Indicates whether the job-completion report will include details of all tasks or only failed tasks.
     */
    ReportScope?: JobReportScope;
  }
  export type JobReportFormat = 'Report_CSV_20180820' | string;
  export type JobReportScope = 'AllTasks' | 'FailedTasksOnly' | string;
  export type JobStatus =
    | 'Active'
    | 'Cancelled'
    | 'Cancelling'
    | 'Complete'
    | 'Completing'
    | 'Failed'
    | 'Failing'
    | 'New'
    | 'Paused'
    | 'Pausing'
    | 'Preparing'
    | 'Ready'
    | 'Suspended'
    | string;
  export type JobStatusList = JobStatus[];
  export type JobStatusUpdateReason = string;
  export type JobTerminationDate = Date;
  export type JobTotalNumberOfTasks = number;
  export type KmsKeyArnString = string;
  export interface LambdaInvokeOperation {
    /**
     * The Amazon Resource Name (ARN) for the AWS Lambda function that the specified job will invoke for each object in the manifest.
     */
    FunctionArn?: NonEmptyMaxLength1024String;
  }
  export interface ListJobsRequest {
    /**
     *
     */
    AccountId: AccountId;
    /**
     * The List Jobs request returns jobs that match the statuses listed in this element.
     */
    JobStatuses?: JobStatusList;
    /**
     * A pagination token to request the next page of results. Use the token that Amazon S3 returned in the NextToken element of the ListJobsResult from the previous List Jobs request.
     */
    NextToken?: NonEmptyMaxLength1024String;
    /**
     * The maximum number of jobs that Amazon S3 will include in the List Jobs response. If there are more jobs than this number, the response will include a pagination token in the NextToken field to enable you to retrieve the next page of results.
     */
    MaxResults?: MaxResults;
  }
  export interface ListJobsResult {
    /**
     * If the List Jobs request produced more than the maximum number of results, you can pass this value into a subsequent List Jobs request in order to retrieve the next page of results.
     */
    NextToken?: NonEmptyMaxLength1024String;
    /**
     * The list of current jobs and jobs that have ended within the last 30 days.
     */
    Jobs?: JobListDescriptorList;
  }
  export type MaxLength1024String = string;
  export type MaxResults = number;
  export type NonEmptyMaxLength1024String = string;
  export type NonEmptyMaxLength2048String = string;
  export type NonEmptyMaxLength256String = string;
  export type NonEmptyMaxLength64String = string;
  export type OperationName =
    | 'LambdaInvoke'
    | 'S3PutObjectCopy'
    | 'S3PutObjectAcl'
    | 'S3PutObjectTagging'
    | 'S3InitiateRestoreObject'
    | string;
  export interface PublicAccessBlockConfiguration {
    /**
     *
     */
    BlockPublicAcls?: Setting;
    /**
     *
     */
    IgnorePublicAcls?: Setting;
    /**
     *
     */
    BlockPublicPolicy?: Setting;
    /**
     *
     */
    RestrictPublicBuckets?: Setting;
  }
  export interface PutPublicAccessBlockRequest {
    /**
     *
     */
    PublicAccessBlockConfiguration: PublicAccessBlockConfiguration;
    /**
     *
     */
    AccountId: AccountId;
  }
  export type ReportPrefixString = string;
  export type RequestedJobStatus = 'Cancelled' | 'Ready' | string;
  export interface S3AccessControlList {
    /**
     *
     */
    Owner: S3ObjectOwner;
    /**
     *
     */
    Grants?: S3GrantList;
  }
  export interface S3AccessControlPolicy {
    /**
     *
     */
    AccessControlList?: S3AccessControlList;
    /**
     *
     */
    CannedAccessControlList?: S3CannedAccessControlList;
  }
  export type S3BucketArnString = string;
  export type S3CannedAccessControlList =
    | 'private'
    | 'public-read'
    | 'public-read-write'
    | 'aws-exec-read'
    | 'authenticated-read'
    | 'bucket-owner-read'
    | 'bucket-owner-full-control'
    | string;
  export type S3ContentLength = number;
  export interface S3CopyObjectOperation {
    /**
     *
     */
    TargetResource?: S3BucketArnString;
    /**
     *
     */
    CannedAccessControlList?: S3CannedAccessControlList;
    /**
     *
     */
    AccessControlGrants?: S3GrantList;
    /**
     *
     */
    MetadataDirective?: S3MetadataDirective;
    /**
     *
     */
    ModifiedSinceConstraint?: TimeStamp;
    /**
     *
     */
    NewObjectMetadata?: S3ObjectMetadata;
    /**
     *
     */
    NewObjectTagging?: S3TagSet;
    /**
     *
     */
    RedirectLocation?: NonEmptyMaxLength2048String;
    /**
     *
     */
    RequesterPays?: Boolean;
    /**
     *
     */
    StorageClass?: S3StorageClass;
    /**
     *
     */
    UnModifiedSinceConstraint?: TimeStamp;
    /**
     *
     */
    SSEAwsKmsKeyId?: KmsKeyArnString;
    TargetKeyPrefix?: NonEmptyMaxLength1024String;
    ObjectLockLegalHoldStatus?: S3ObjectLockLegalHoldStatus;
    ObjectLockMode?: S3ObjectLockMode;
    ObjectLockRetainUntilDate?: TimeStamp;
  }
  export type S3ExpirationInDays = number;
  export type S3GlacierJobTier = 'BULK' | 'STANDARD' | string;
  export interface S3Grant {
    /**
     *
     */
    Grantee?: S3Grantee;
    /**
     *
     */
    Permission?: S3Permission;
  }
  export type S3GrantList = S3Grant[];
  export interface S3Grantee {
    /**
     *
     */
    TypeIdentifier?: S3GranteeTypeIdentifier;
    /**
     *
     */
    Identifier?: NonEmptyMaxLength1024String;
    /**
     *
     */
    DisplayName?: NonEmptyMaxLength1024String;
  }
  export type S3GranteeTypeIdentifier = 'id' | 'emailAddress' | 'uri' | string;
  export interface S3InitiateRestoreObjectOperation {
    /**
     *
     */
    ExpirationInDays?: S3ExpirationInDays;
    /**
     *
     */
    GlacierJobTier?: S3GlacierJobTier;
  }
  export type S3KeyArnString = string;
  export type S3MetadataDirective = 'COPY' | 'REPLACE' | string;
  export type S3ObjectLockLegalHoldStatus = 'OFF' | 'ON' | string;
  export type S3ObjectLockMode = 'COMPLIANCE' | 'GOVERNANCE' | string;
  export interface S3ObjectMetadata {
    /**
     *
     */
    CacheControl?: NonEmptyMaxLength1024String;
    /**
     *
     */
    ContentDisposition?: NonEmptyMaxLength1024String;
    /**
     *
     */
    ContentEncoding?: NonEmptyMaxLength1024String;
    /**
     *
     */
    ContentLanguage?: NonEmptyMaxLength1024String;
    /**
     *
     */
    UserMetadata?: S3UserMetadata;
    /**
     *
     */
    ContentLength?: S3ContentLength;
    /**
     *
     */
    ContentMD5?: NonEmptyMaxLength1024String;
    /**
     *
     */
    ContentType?: NonEmptyMaxLength1024String;
    /**
     *
     */
    HttpExpiresDate?: TimeStamp;
    /**
     *
     */
    RequesterCharged?: Boolean;
    /**
     *
     */
    SSEAlgorithm?: S3SSEAlgorithm;
  }
  export interface S3ObjectOwner {
    /**
     *
     */
    ID?: NonEmptyMaxLength1024String;
    /**
     *
     */
    DisplayName?: NonEmptyMaxLength1024String;
  }
  export type S3ObjectVersionId = string;
  export type S3Permission =
    | 'FULL_CONTROL'
    | 'READ'
    | 'WRITE'
    | 'READ_ACP'
    | 'WRITE_ACP'
    | string;
  export type S3SSEAlgorithm = 'AES256' | 'KMS' | string;
  export interface S3SetObjectAclOperation {
    /**
     *
     */
    AccessControlPolicy?: S3AccessControlPolicy;
  }
  export interface S3SetObjectTaggingOperation {
    /**
     *
     */
    TagSet?: S3TagSet;
  }
  export type S3StorageClass =
    | 'STANDARD'
    | 'STANDARD_IA'
    | 'ONEZONE_IA'
    | 'GLACIER'
    | 'INTELLIGENT_TIERING'
    | 'DEEP_ARCHIVE'
    | string;
  export interface S3Tag {
    /**
     *
     */
    Key: NonEmptyMaxLength1024String;
    /**
     *
     */
    Value: MaxLength1024String;
  }
  export type S3TagSet = S3Tag[];
  export type S3UserMetadata = { [key: string]: MaxLength1024String };
  export type Setting = boolean;
  export type SuspendedCause = string;
  export type SuspendedDate = Date;
  export type TimeStamp = Date;
  export interface UpdateJobPriorityRequest {
    /**
     *
     */
    AccountId: AccountId;
    /**
     * The ID for the job whose priority you want to update.
     */
    JobId: JobId;
    /**
     * The priority you want to assign to this job.
     */
    Priority: JobPriority;
  }
  export interface UpdateJobPriorityResult {
    /**
     * The ID for the job whose priority Amazon S3 updated.
     */
    JobId: JobId;
    /**
     * The new priority assigned to the specified job.
     */
    Priority: JobPriority;
  }
  export interface UpdateJobStatusRequest {
    /**
     *
     */
    AccountId: AccountId;
    /**
     * The ID of the job whose status you want to update.
     */
    JobId: JobId;
    /**
     * The status that you want to move the specified job to.
     */
    RequestedJobStatus: RequestedJobStatus;
    /**
     * A description of the reason why you want to change the specified job's status. This field can be any string up to the maximum length.
     */
    StatusUpdateReason?: JobStatusUpdateReason;
  }
  export interface UpdateJobStatusResult {
    /**
     * The ID for the job whose status was updated.
     */
    JobId?: JobId;
    /**
     * The current status for the specified job.
     */
    Status?: JobStatus;
    /**
     * The reason that the specified job's status was updated.
     */
    StatusUpdateReason?: JobStatusUpdateReason;
  }
  /**
   * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
   */
  export type apiVersion = '2018-08-20' | 'latest' | string;
  export interface ClientApiVersions {
    /**
     * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
     */
    apiVersion?: apiVersion;
  }
  export type ClientConfiguration = ServiceConfigurationOptions &
    UseDualstackConfigOptions &
    ClientApiVersions;
  /**
   * Contains interfaces for use with the S3Control client.
   */
  export import Types = S3Control;
}
export = S3Control;
