"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    Rule.metadata = {
        ruleName: 'tsr-disable-mustache-escape',
        description: 'Warns when escapeMarkup=false property with some template engines is used',
        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["Any usage of escapeMarkup=false property will trigger a warning.\n            See https://github.com/webschik/tslint-config-security#tsr-disable-mustache-escape"], ["Any usage of escapeMarkup=false property will trigger a warning.\n            See https://github.com/webschik/tslint-config-security#tsr-disable-mustache-escape"]))),
        optionsDescription: '',
        options: null,
        type: 'functionality',
        requiresTypeInfo: false,
        typescriptOnly: false
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
    function visitNode(node) {
        if (node.kind === ts.SyntaxKind.PropertyAccessExpression) {
            var name = node.name;
            var parent = node.parent;
            if (name &&
                parent &&
                parent.operatorToken &&
                parent.operatorToken.kind === ts.SyntaxKind.EqualsToken &&
                parent.right &&
                parent.right.kind === ts.SyntaxKind.FalseKeyword &&
                name.text === 'escapeMarkup') {
                ctx.addFailureAtNode(node, 'Markup escaping disabled');
            }
        }
        return ts.forEachChild(node, visitNode);
    }
    return ts.forEachChild(ctx.sourceFile, visitNode);
}
var templateObject_1;
