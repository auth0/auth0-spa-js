"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var node_kind_1 = require("../node-kind");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    Rule.metadata = {
        ruleName: 'tsr-detect-non-literal-buffer',
        description: 'Warns when Buffer constructor with non-literal argument is used',
        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["Any usage of new Buffer()\n            with non-literal argument will trigger a warning.\n            See https://github.com/webschik/tslint-config-security#tsr-detect-non-literal-buffer"], ["Any usage of new Buffer()\n            with non-literal argument will trigger a warning.\n            See https://github.com/webschik/tslint-config-security#tsr-detect-non-literal-buffer"]))),
        optionsDescription: '',
        options: null,
        type: 'functionality',
        requiresTypeInfo: false,
        typescriptOnly: false
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
    function visitNode(node) {
        if (node.kind === ts.SyntaxKind.NewExpression) {
            var _a = node, expression = _a.expression, args = _a.arguments;
            var firstArgument = args && args[0];
            if (expression &&
                firstArgument &&
                expression.text === 'Buffer' &&
                !node_kind_1.stringLiteralKinds.includes(firstArgument.kind)) {
                ctx.addFailureAtNode(node, 'Found new Buffer with non-literal argument');
            }
        }
        return ts.forEachChild(node, visitNode);
    }
    return ts.forEachChild(ctx.sourceFile, visitNode);
}
var templateObject_1;
