"use strict";
/**
 * @license
 * Copyright 2019 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var Lint = require("../index");
var Rule = /** @class */ (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    /* tslint:disable:object-literal-sort-keys */
    Rule.metadata = {
        ruleName: "invalid-void",
        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n            Disallows usage of `void` type outside of return type.\n            If `void` is used as return type, it shouldn't be a part of intersection/union type."], ["\n            Disallows usage of \\`void\\` type outside of return type.\n            If \\`void\\` is used as return type, it shouldn't be a part of intersection/union type."]))),
        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n            The `void` type means \"nothing\" or that a function does not return any value,\n            in contra with implicit `undefined` type which means that a function returns a value `undefined`.\n            So \"nothing\" cannot be mixed with any other types.\n            If you need this - use `undefined` type instead."], ["\n            The \\`void\\` type means \"nothing\" or that a function does not return any value,\n            in contra with implicit \\`undefined\\` type which means that a function returns a value \\`undefined\\`.\n            So \"nothing\" cannot be mixed with any other types.\n            If you need this - use \\`undefined\\` type instead."]))),
        hasFix: false,
        optionsDescription: "Not configurable.",
        options: null,
        optionExamples: [true],
        type: "maintainability",
        typescriptOnly: true,
    };
    /* tslint:enable:object-literal-sort-keys */
    Rule.FAILURE_STRING = "void is not a valid type other than return types";
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var failedKinds = new Set([
    ts.SyntaxKind.PropertySignature,
    ts.SyntaxKind.PropertyDeclaration,
    ts.SyntaxKind.VariableDeclaration,
    ts.SyntaxKind.TypeAliasDeclaration,
    ts.SyntaxKind.IntersectionType,
    ts.SyntaxKind.UnionType,
    ts.SyntaxKind.Parameter,
    ts.SyntaxKind.TypeParameter,
    ts.SyntaxKind.AsExpression,
    ts.SyntaxKind.TypeAssertionExpression,
    ts.SyntaxKind.TypeOperator,
    ts.SyntaxKind.ArrayType,
    ts.SyntaxKind.MappedType,
    ts.SyntaxKind.ConditionalType,
    ts.SyntaxKind.TypeReference,
    ts.SyntaxKind.NewExpression,
    ts.SyntaxKind.CallExpression,
]);
function walk(ctx) {
    ts.forEachChild(ctx.sourceFile, function cb(node) {
        if (node.kind === ts.SyntaxKind.VoidKeyword && failedKinds.has(node.parent.kind)) {
            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);
        }
        ts.forEachChild(node, cb);
    });
}
var templateObject_1, templateObject_2;
